/* The following code was generated by JFlex 1.7.0 */


package i.katydid.kotlgen.parsing;

import static i.katydid.kotlgen.parsing.EKotlinTokenType.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>KotlinLexer.flex</tt>
 */
public class KotlinLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRINGLITERAL = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\114\1\115\1\1\16\7\4\0\1\3\1\51"+
    "\1\27\1\0\1\67\1\74\1\62\1\30\1\101\1\103\1\5\1\26"+
    "\1\77\1\63\1\24\1\4\1\15\1\20\1\104\1\110\1\105\1\113"+
    "\1\111\1\106\1\107\1\11\1\66\1\76\1\72\1\70\1\64\1\34"+
    "\1\65\1\14\1\22\1\14\1\112\1\25\1\23\5\6\1\13\13\6"+
    "\1\17\2\6\1\71\1\31\1\75\1\0\1\12\1\10\1\32\1\21"+
    "\1\40\1\47\1\36\1\50\1\54\1\55\1\45\1\52\1\37\1\41"+
    "\1\61\1\43\1\42\1\53\1\6\1\35\1\33\1\44\1\46\1\60"+
    "\1\56\1\16\1\57\1\6\1\100\1\73\1\102\1\0\6\7\1\116"+
    "\32\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0"+
    "\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0"+
    "\5\6\7\0\1\6\1\0\1\6\21\0\160\7\5\6\1\0\2\6"+
    "\2\0\4\6\10\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6"+
    "\1\0\123\6\1\0\213\6\1\0\5\7\2\0\236\6\11\0\46\6"+
    "\2\0\1\6\7\0\47\6\7\0\1\6\1\0\55\7\1\0\1\7"+
    "\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\6\5\0\3\6"+
    "\15\0\5\7\6\0\1\6\4\0\13\7\5\0\53\6\37\7\4\0"+
    "\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7"+
    "\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6"+
    "\1\7\36\6\33\7\2\0\131\6\13\7\1\6\16\0\12\7\41\6"+
    "\11\7\2\6\4\0\1\6\5\0\26\6\4\7\1\6\11\7\1\6"+
    "\3\7\1\6\5\7\22\0\31\6\3\7\104\0\1\6\1\0\13\6"+
    "\67\0\33\7\1\0\4\7\66\6\3\7\1\6\22\7\1\6\7\7"+
    "\12\6\2\7\2\0\12\7\1\0\7\6\1\0\7\6\1\0\3\7"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6"+
    "\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7"+
    "\1\6\10\0\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7"+
    "\4\6\7\0\1\6\5\0\3\7\1\0\6\6\4\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0"+
    "\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0"+
    "\4\6\1\0\1\6\7\0\14\7\3\6\1\7\13\0\3\7\1\0"+
    "\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0"+
    "\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7"+
    "\10\0\2\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\1\0"+
    "\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6"+
    "\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6"+
    "\3\0\14\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6"+
    "\6\0\1\7\16\0\12\7\11\0\1\6\7\0\3\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6"+
    "\7\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0\2\6\6\0"+
    "\2\6\2\7\2\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7"+
    "\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6"+
    "\2\7\2\0\12\7\1\0\2\6\17\0\2\7\1\0\10\6\1\0"+
    "\3\6\1\0\51\6\2\0\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\1\6\10\0\1\7\10\0\2\6\2\7\2\0\12\7\12\0\6\6"+
    "\2\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6"+
    "\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7"+
    "\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7"+
    "\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6"+
    "\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6"+
    "\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0"+
    "\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7"+
    "\2\0\4\6\40\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7"+
    "\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0\44\6\4\0"+
    "\24\7\1\0\2\7\5\6\13\7\1\0\44\7\11\0\1\7\71\0"+
    "\53\6\24\7\1\6\12\7\6\0\6\6\4\7\4\6\3\7\1\6"+
    "\3\7\2\6\7\7\3\6\4\7\15\6\14\7\1\6\17\7\2\0"+
    "\46\6\1\0\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0"+
    "\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0"+
    "\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0"+
    "\3\7\40\0\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0"+
    "\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7"+
    "\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6"+
    "\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7"+
    "\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6\10\0\51\6"+
    "\1\7\1\6\5\0\106\6\12\0\35\6\3\0\14\7\4\0\14\7"+
    "\12\0\12\7\36\6\2\0\5\6\13\0\54\6\4\0\21\7\7\6"+
    "\2\7\6\0\12\7\46\0\27\6\5\7\4\0\65\6\12\7\1\0"+
    "\35\7\2\0\13\7\6\0\12\7\15\0\1\6\130\0\5\7\57\6"+
    "\21\7\7\6\4\0\12\7\21\0\11\7\14\0\3\7\36\6\15\7"+
    "\2\6\12\7\54\6\16\7\14\0\44\6\24\7\10\0\12\7\3\0"+
    "\3\6\12\7\44\6\122\0\3\7\1\0\25\7\4\6\1\7\4\6"+
    "\3\7\2\6\11\0\300\6\47\7\25\0\4\7\u0116\6\2\0\6\6"+
    "\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6"+
    "\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6"+
    "\5\0\3\6\1\0\7\6\16\0\5\7\30\0\1\114\1\114\5\7"+
    "\20\0\2\6\23\0\1\6\13\0\5\7\5\0\6\7\1\0\1\6"+
    "\15\0\1\6\20\0\15\6\3\0\33\6\25\0\15\7\4\0\1\7"+
    "\3\0\14\7\21\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6"+
    "\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6\21\0\51\6"+
    "\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\7\2\6"+
    "\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6"+
    "\17\0\1\7\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0\5\6"+
    "\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0\132\6"+
    "\1\0\4\6\5\0\51\6\3\0\136\6\21\0\33\6\65\0\20\6"+
    "\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6\103\0\56\6\2\0\u010d\6"+
    "\3\0\20\6\12\7\2\6\24\0\57\6\1\7\4\0\12\7\1\0"+
    "\31\6\7\0\1\7\120\6\2\7\45\0\11\6\2\0\147\6\2\0"+
    "\4\6\1\0\4\6\14\0\13\6\115\0\12\6\1\7\3\6\1\7"+
    "\4\6\1\7\27\6\5\7\20\0\1\6\7\0\64\6\14\0\2\7"+
    "\62\6\21\7\13\0\12\7\6\0\22\7\6\6\3\0\1\6\4\0"+
    "\12\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6\3\0\4\7"+
    "\57\6\16\7\16\0\1\6\12\7\46\0\51\6\16\7\11\0\3\6"+
    "\1\7\10\6\2\7\2\0\12\7\6\0\27\6\3\0\1\6\1\7"+
    "\4\0\60\6\1\7\1\6\3\7\2\6\2\7\5\6\2\7\1\6"+
    "\1\7\1\6\30\0\3\6\2\0\13\6\5\7\2\0\3\6\2\7"+
    "\12\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6\1\0\7\6"+
    "\221\0\43\6\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\6\14\0"+
    "\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0"+
    "\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0"+
    "\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0"+
    "\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0\7\7\14\0"+
    "\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0"+
    "\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0"+
    "\32\6\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0"+
    "\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0\14\6\1\0"+
    "\32\6\1\0\23\6\1\0\2\6\1\0\17\6\2\0\16\6\42\0"+
    "\173\6\105\0\65\6\210\0\1\7\202\0\35\6\3\0\61\6\57\0"+
    "\37\6\21\0\33\6\65\0\36\6\2\0\44\6\4\0\10\6\1\0"+
    "\5\6\52\0\236\6\2\0\12\7\u0356\0\6\6\2\0\1\6\1\0"+
    "\54\6\1\0\2\6\3\0\1\6\2\0\27\6\252\0\26\6\12\0"+
    "\32\6\106\0\70\6\6\0\2\6\100\0\1\6\3\7\1\0\2\7"+
    "\5\0\4\7\4\6\1\0\3\6\1\0\33\6\4\0\3\7\4\0"+
    "\1\7\40\0\35\6\203\0\66\6\12\0\26\6\12\0\23\6\215\0"+
    "\111\6\u03b7\0\3\7\65\6\17\7\37\0\12\7\20\0\3\7\55\6"+
    "\13\7\2\0\1\7\22\0\31\6\7\0\12\7\6\0\3\7\44\6"+
    "\16\7\1\0\12\7\100\0\3\7\60\6\16\7\4\6\13\0\12\7"+
    "\u04a6\0\53\6\15\7\10\0\12\7\u0936\0\u036f\6\221\0\143\6\u0b9d\0"+
    "\u042f\6\u33d1\0\u0239\6\u04c7\0\105\6\13\0\1\6\56\7\20\0\4\7"+
    "\15\6\u4060\0\2\6\u2163\0\5\7\3\0\26\7\2\0\7\7\36\0"+
    "\4\7\224\0\3\7\u01bb\0\125\6\1\0\107\6\1\0\2\6\2\0"+
    "\1\6\2\0\2\6\2\0\4\6\1\0\14\6\1\0\1\6\1\0"+
    "\7\6\1\0\101\6\1\0\4\6\2\0\10\6\1\0\7\6\1\0"+
    "\34\6\1\0\4\6\1\0\5\6\1\0\1\6\3\0\7\6\1\0"+
    "\u0154\6\2\0\31\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0"+
    "\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0"+
    "\31\6\1\0\10\6\2\0\62\7\u1600\0\4\6\1\0\33\6\1\0"+
    "\2\6\1\0\1\6\2\0\1\6\1\0\12\6\1\0\4\6\1\0"+
    "\1\6\1\0\1\6\6\0\1\6\4\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\3\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6\1\0"+
    "\1\6\2\0\4\6\1\0\7\6\1\0\4\6\1\0\4\6\1\0"+
    "\1\6\1\0\12\6\1\0\21\6\5\0\3\6\1\0\5\6\1\0"+
    "\21\6\u1144\0\ua6d7\6\51\0\u1035\6\13\0\336\6\u3fe2\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\6\1\5\1\10\1\11\1\12\1\13\2\5"+
    "\1\14\12\5\1\15\4\5\1\1\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\1\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\1\2\41\1\1\1\42\1\0\1\43\1\44"+
    "\2\0\1\45\1\46\1\47\1\0\1\50\2\0\1\5"+
    "\1\51\1\52\1\53\1\54\1\5\1\55\4\5\1\56"+
    "\1\57\23\5\1\60\1\61\1\62\1\63\3\5\1\64"+
    "\5\5\1\0\1\65\1\66\6\5\1\67\1\70\1\71"+
    "\1\72\1\0\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\12\106\2\42\2\0"+
    "\1\5\1\6\1\47\1\0\1\107\1\110\2\5\1\111"+
    "\3\5\1\112\20\5\1\113\6\5\1\114\15\5\1\115"+
    "\3\5\1\116\1\117\1\120\1\121\5\5\1\122\2\5"+
    "\1\123\1\124\1\0\1\125\1\0\1\126\1\127\1\130"+
    "\1\131\1\132\1\133\1\134\1\135\2\0\1\42\1\0"+
    "\1\136\1\0\1\137\15\5\1\140\1\141\11\5\1\142"+
    "\2\5\1\143\1\5\1\144\1\5\1\145\4\5\1\146"+
    "\2\5\1\147\4\5\1\150\10\5\1\151\2\5\1\0"+
    "\1\152\6\5\1\153\5\5\1\154\1\5\1\155\1\156"+
    "\10\5\1\157\2\5\1\160\1\5\1\161\3\5\1\162"+
    "\1\163\1\164\1\165\5\5\1\166\1\167\1\5\1\0"+
    "\1\5\1\170\1\5\1\171\3\5\1\172\2\5\1\173"+
    "\5\5\1\174\5\5\1\175\2\5\1\176\7\5\1\177"+
    "\1\200\1\0\3\5\1\201\1\5\1\202\11\5\1\203"+
    "\4\5\1\204\1\205\1\206\2\5\1\207\1\0\1\210"+
    "\1\5\1\211\1\212\1\213\2\5\1\214\1\5\1\215"+
    "\1\216\1\217\1\220\1\5\1\221\1\5\1\222\1\5"+
    "\1\223\1\0\3\5\1\224\1\225\1\226\1\227\1\0"+
    "\1\230\2\5\1\0\1\231\1\232\1\233";

  private static int [] zzUnpackAction() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\355\0\u018b\0\u01da"+
    "\0\u0229\0\u0278\0\u02c7\0\u0229\0\u0316\0\u0365\0\u03b4\0\u0403"+
    "\0\355\0\355\0\u0452\0\u04a1\0\u04f0\0\u053f\0\u058e\0\u05dd"+
    "\0\u062c\0\u067b\0\u06ca\0\u0719\0\u0768\0\u07b7\0\u0806\0\u0855"+
    "\0\u08a4\0\u08f3\0\u0942\0\u0991\0\u09e0\0\u0a2f\0\u0a7e\0\355"+
    "\0\u0acd\0\u0229\0\u0b1c\0\355\0\u0b6b\0\u0bba\0\u0c09\0\355"+
    "\0\355\0\355\0\355\0\355\0\355\0\355\0\u0c58\0\355"+
    "\0\u0ca7\0\u0cf6\0\u0d45\0\355\0\u0d94\0\u0de3\0\u0e32\0\355"+
    "\0\355\0\u0e81\0\u0ed0\0\355\0\355\0\u0f1f\0\u0f6e\0\355"+
    "\0\u0fbd\0\u100c\0\u105b\0\u0229\0\355\0\355\0\355\0\u10aa"+
    "\0\u10f9\0\u1148\0\u1197\0\u11e6\0\u1235\0\355\0\355\0\u1284"+
    "\0\u12d3\0\u1322\0\u1371\0\u13c0\0\u140f\0\u145e\0\u14ad\0\u14fc"+
    "\0\u154b\0\u159a\0\u15e9\0\u1638\0\u1687\0\u16d6\0\u1725\0\u1774"+
    "\0\u17c3\0\u1812\0\u0229\0\u1861\0\u0229\0\u0229\0\u18b0\0\u18ff"+
    "\0\u194e\0\u0229\0\u199d\0\u19ec\0\u1a3b\0\u1a8a\0\u1ad9\0\u1b28"+
    "\0\355\0\u1b77\0\u1bc6\0\u1c15\0\u1c64\0\u1cb3\0\u1d02\0\u1d51"+
    "\0\355\0\355\0\355\0\355\0\u1da0\0\355\0\355\0\u1def"+
    "\0\355\0\355\0\355\0\355\0\355\0\355\0\355\0\355"+
    "\0\355\0\u1e3e\0\u1e8d\0\u1edc\0\u1f2b\0\u1f7a\0\u1fc9\0\u2018"+
    "\0\u2067\0\u20b6\0\u2105\0\355\0\u2154\0\u21a3\0\355\0\u21f2"+
    "\0\u2241\0\u2290\0\u22df\0\u232e\0\u237d\0\u23cc\0\355\0\u241b"+
    "\0\u246a\0\u24b9\0\u2508\0\u2557\0\u25a6\0\u25f5\0\u2644\0\u2693"+
    "\0\u26e2\0\u2731\0\u2780\0\u27cf\0\u281e\0\u286d\0\u28bc\0\u290b"+
    "\0\u295a\0\u29a9\0\u29f8\0\u0229\0\u2a47\0\u2a96\0\u2ae5\0\u2b34"+
    "\0\u2b83\0\u2bd2\0\u0229\0\u2c21\0\u2c70\0\u2cbf\0\u2d0e\0\u2d5d"+
    "\0\u2dac\0\u2dfb\0\u2e4a\0\u2e99\0\u2ee8\0\u2f37\0\u2f86\0\u2fd5"+
    "\0\u0229\0\u3024\0\u3073\0\u30c2\0\u0229\0\355\0\355\0\355"+
    "\0\u3111\0\u3160\0\u31af\0\u31fe\0\u324d\0\u0229\0\u329c\0\u32eb"+
    "\0\u333a\0\u0229\0\u3389\0\355\0\u20b6\0\355\0\355\0\355"+
    "\0\355\0\355\0\355\0\355\0\355\0\u33d8\0\u3427\0\u2154"+
    "\0\u3476\0\355\0\u34c5\0\355\0\u3514\0\u3563\0\u35b2\0\u3601"+
    "\0\u3650\0\u369f\0\u36ee\0\u373d\0\u378c\0\u37db\0\u382a\0\u3879"+
    "\0\u38c8\0\u0229\0\u0229\0\u3917\0\u3966\0\u39b5\0\u3a04\0\u3a53"+
    "\0\u3aa2\0\u3af1\0\u3b40\0\u3b8f\0\u0229\0\u3bde\0\u3c2d\0\u0229"+
    "\0\u3c7c\0\u0229\0\u3ccb\0\u0229\0\u3d1a\0\u3d69\0\u3db8\0\u3e07"+
    "\0\u0229\0\u3e56\0\u3ea5\0\u0229\0\u3ef4\0\u3f43\0\u3f92\0\u3fe1"+
    "\0\u0229\0\u4030\0\u407f\0\u40ce\0\u411d\0\u416c\0\u41bb\0\u420a"+
    "\0\u4259\0\u0229\0\u42a8\0\u42f7\0\u4346\0\u0229\0\u4395\0\u43e4"+
    "\0\u4433\0\u4482\0\u44d1\0\u4520\0\u0229\0\u456f\0\u45be\0\u460d"+
    "\0\u465c\0\u46ab\0\u0229\0\u46fa\0\u0229\0\u4749\0\u4798\0\u47e7"+
    "\0\u4836\0\u4885\0\u48d4\0\u4923\0\u4972\0\u49c1\0\u0229\0\u4a10"+
    "\0\u4a5f\0\u0229\0\u4aae\0\u0229\0\u4afd\0\u4b4c\0\u4b9b\0\u0229"+
    "\0\u0229\0\u4bea\0\u0229\0\u4c39\0\u4c88\0\u4cd7\0\u4d26\0\u4d75"+
    "\0\u0229\0\u0229\0\u4dc4\0\u4e13\0\u4e62\0\u0229\0\u4eb1\0\u0229"+
    "\0\u4f00\0\u4f4f\0\u4f9e\0\u0229\0\u4fed\0\u503c\0\u0229\0\u508b"+
    "\0\u50da\0\u5129\0\u5178\0\u51c7\0\u0229\0\u5216\0\u5265\0\u52b4"+
    "\0\u5303\0\u5352\0\u0229\0\u53a1\0\u53f0\0\u0229\0\u543f\0\u548e"+
    "\0\u54dd\0\u552c\0\u557b\0\u55ca\0\u5619\0\u0229\0\u0229\0\u5668"+
    "\0\u56b7\0\u5706\0\u5755\0\u0229\0\u57a4\0\u0229\0\u57f3\0\u5842"+
    "\0\u5891\0\u58e0\0\u592f\0\u597e\0\u59cd\0\u5a1c\0\u5a6b\0\u0229"+
    "\0\u5aba\0\u5b09\0\u5b58\0\u5ba7\0\u0229\0\u0229\0\u0229\0\u5bf6"+
    "\0\u5c45\0\u0229\0\u5c94\0\u0229\0\u5ce3\0\u0229\0\u0229\0\u0229"+
    "\0\u5d32\0\u5d81\0\u0229\0\u5dd0\0\u0229\0\u0229\0\u0229\0\u0229"+
    "\0\u5e1f\0\u0229\0\u5e6e\0\u0229\0\u5ebd\0\u0229\0\u5f0c\0\u5f5b"+
    "\0\u5faa\0\u5ff9\0\u0229\0\u0229\0\u0229\0\u0229\0\u6048\0\u0229"+
    "\0\u6097\0\u60e6\0\u6135\0\u0229\0\u0229\0\355";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\1\14\2\11\1\15\2\11\1\13\1\16\2\11"+
    "\1\17\1\11\1\20\1\21\1\22\1\4\1\23\1\24"+
    "\1\25\1\26\1\27\1\11\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\11\1\36\1\37\1\40\1\11\1\41"+
    "\1\42\1\11\1\43\1\11\1\44\1\11\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\6\13\1\11\1\13\1\4\1\6\1\4\1\67\2\4"+
    "\24\67\1\70\1\67\1\71\65\67\1\72\1\73\1\74"+
    "\25\72\1\4\1\75\65\72\121\0\1\6\120\0\1\76"+
    "\1\77\62\0\1\100\116\0\1\101\34\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\14\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\1\102"+
    "\2\0\5\102\1\0\106\102\11\0\1\13\1\103\1\104"+
    "\1\0\1\13\2\0\1\13\2\0\1\105\1\106\1\107"+
    "\10\0\1\107\10\0\1\110\1\105\33\0\6\13\1\110"+
    "\1\13\14\0\1\13\1\103\1\104\1\0\1\13\2\111"+
    "\1\13\2\112\1\105\1\106\1\107\10\0\1\107\10\0"+
    "\1\110\1\105\33\0\6\13\1\110\1\13\11\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\1\113"+
    "\13\11\1\0\5\11\1\114\2\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\11\0\1\106\3\0\1\106\2\0"+
    "\1\106\3\0\1\115\57\0\6\106\1\0\1\106\31\0"+
    "\1\116\41\0\1\117\34\0\2\11\1\0\10\11\1\120"+
    "\2\11\1\0\1\11\4\0\1\11\1\121\1\0\3\11"+
    "\1\122\2\11\1\123\5\11\1\0\10\11\5\0\1\11"+
    "\14\0\10\11\2\0\1\11\6\0\2\11\1\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\0\1\11\1\124\7\11"+
    "\1\125\2\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\24\0\1\126\41\0\1\127\36\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\1\11"+
    "\1\130\12\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\5\11\1\131\5\11"+
    "\1\0\1\11\4\0\2\11\1\0\4\11\1\132\1\11"+
    "\1\133\5\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\1\134\1\11\1\0\1\135\3\11\1\136\1\137"+
    "\6\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\1\140\1\11\1\0\14\11\1\0\10\11\5\0\1\11"+
    "\14\0\10\11\2\0\1\11\6\0\2\11\1\0\10\11"+
    "\1\141\2\11\1\0\1\11\4\0\2\11\1\0\11\11"+
    "\1\142\2\11\1\0\1\11\1\143\4\11\1\144\1\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\5\11"+
    "\1\145\3\11\1\146\2\11\1\0\10\11\5\0\1\11"+
    "\14\0\10\11\2\0\1\11\6\0\2\11\1\0\13\11"+
    "\1\0\1\11\4\0\1\147\1\11\1\0\1\150\13\11"+
    "\1\0\3\11\1\151\1\11\1\152\2\11\5\0\1\11"+
    "\14\0\10\11\2\0\1\11\6\0\2\11\1\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\153\1\0\6\11\1\154"+
    "\1\155\3\11\1\156\1\0\7\11\1\157\5\0\1\11"+
    "\14\0\10\11\2\0\1\11\6\0\2\11\1\0\13\11"+
    "\1\0\1\11\4\0\1\160\1\11\1\0\1\11\1\161"+
    "\3\11\1\162\6\11\1\0\5\11\1\163\2\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\1\164\1\11\1\0\5\11"+
    "\1\165\2\11\1\166\1\167\2\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\45\0\1\170\3\0"+
    "\1\171\16\0\1\172\34\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\1\173\1\11\1\0\1\174\10\11\1\175"+
    "\2\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\1\11\1\176\12\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\14\11\1\0"+
    "\3\11\1\177\4\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\1\200\1\11\1\0\14\11\1\0\10\11\5\0\1\11"+
    "\14\0\10\11\2\0\1\11\62\0\1\201\117\0\1\202"+
    "\1\203\3\0\1\204\13\0\1\205\102\0\1\206\114\0"+
    "\1\207\120\0\1\210\116\0\1\211\121\0\1\212\113\0"+
    "\1\213\26\0\1\67\2\0\24\67\1\0\1\67\1\0"+
    "\65\67\27\0\1\214\5\0\1\215\5\0\1\216\1\217"+
    "\102\0\1\220\70\0\1\74\114\0\1\221\2\0\12\221"+
    "\1\222\2\221\1\222\1\223\5\221\1\224\1\225\1\226"+
    "\3\221\1\227\5\221\1\230\1\231\37\221\1\222\2\232"+
    "\1\221\1\222\1\232\1\221\1\232\3\0\1\76\1\233"+
    "\1\234\114\76\5\235\1\236\111\235\1\102\2\0\5\102"+
    "\1\237\106\102\11\0\1\240\1\103\2\0\1\240\2\0"+
    "\1\240\63\0\6\240\1\0\1\240\14\0\1\106\3\0"+
    "\1\106\2\0\1\106\2\0\1\105\1\0\1\107\10\0"+
    "\1\107\10\0\1\110\1\105\33\0\6\106\1\110\1\106"+
    "\14\0\1\241\3\0\1\241\2\0\1\241\5\0\1\242"+
    "\34\0\1\242\20\0\6\241\1\0\1\241\14\0\1\243"+
    "\2\0\2\243\2\0\4\243\1\0\1\243\4\0\1\243"+
    "\3\0\1\243\1\0\1\243\6\0\2\243\33\0\10\243"+
    "\20\0\1\244\2\0\1\244\104\0\2\11\1\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\0\1\11\1\245\12\11"+
    "\1\0\10\11\5\0\1\11\14\0\10\11\2\0\1\11"+
    "\6\0\2\11\1\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\246\1\0\14\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\247\14\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\7\11\1\250"+
    "\4\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\6\11\1\251\5\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\1\252\1\11\1\0\7\11"+
    "\1\253\4\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\254\1\0\14\11\1\0\1\11\1\255"+
    "\6\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\3\11\1\256\3\11\1\257\1\260\3\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\7\11"+
    "\1\261\4\11\1\0\1\11\1\262\6\11\5\0\1\11"+
    "\14\0\10\11\2\0\1\11\6\0\2\11\1\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\263\1\0\14\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\11\11\1\264\2\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\7\11\1\265\4\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\5\11\1\266\6\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\1\267\1\11\1\0\14\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\6\11"+
    "\1\270\5\11\1\0\7\11\1\271\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\7\11\1\272\4\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\14\11\1\0\1\273\7\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\7\11\1\274\4\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\1\11"+
    "\1\275\12\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\1\11\1\276\12\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\10\11"+
    "\1\277\3\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\4\11\1\300\7\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\10\11"+
    "\1\301\3\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\11\11\1\302\2\11\1\0\5\11"+
    "\1\303\2\11\5\0\1\11\14\0\10\11\2\0\1\11"+
    "\6\0\2\11\1\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\0\1\304\7\11\1\305\3\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\14\11\1\0"+
    "\1\11\1\306\6\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\4\11\1\307\1\11\1\310\1\311\1\312"+
    "\2\11\1\313\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\14\11\1\0\1\11\1\314\6\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\7\11"+
    "\1\315\4\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\4\11\1\316\7\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\6\11"+
    "\1\317\5\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\4\11\1\320\7\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\1\321"+
    "\13\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\1\11\1\322\2\11\1\323\1\11\1\324"+
    "\5\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\6\11\1\325\5\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\33\0\1\326\7\0"+
    "\1\327\143\0\1\330\34\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\1\331\2\11\1\332\10\11"+
    "\1\0\10\11\5\0\1\11\14\0\10\11\2\0\1\11"+
    "\6\0\2\11\1\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\0\5\11\1\333\2\11\1\334\3\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\10\11\1\335\2\11\1\0\1\11\4\0\2\11"+
    "\1\0\14\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\7\11\1\336\4\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\1\11"+
    "\1\337\6\11\1\340\3\11\1\0\10\11\5\0\1\11"+
    "\14\0\10\11\2\0\1\11\6\0\2\11\1\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\0\1\341\3\11\1\342"+
    "\7\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\20\0\1\343\166\0\1\344\43\0\1\345\2\0"+
    "\1\345\7\0\1\346\53\0\3\345\1\0\2\345\1\0"+
    "\1\345\33\0\1\347\116\0\1\350\116\0\1\351\116\0"+
    "\1\352\116\0\1\353\116\0\1\354\116\0\1\355\103\0"+
    "\1\356\2\0\1\356\7\0\1\346\53\0\3\356\1\0"+
    "\2\356\1\0\1\356\5\0\1\234\114\0\5\235\1\357"+
    "\115\235\1\360\1\357\111\235\11\0\1\240\1\103\1\104"+
    "\1\0\1\240\2\0\1\240\63\0\6\240\1\0\1\240"+
    "\14\0\1\241\3\0\1\241\2\0\1\241\2\0\1\105"+
    "\23\0\1\110\1\105\33\0\6\241\1\110\1\241\14\0"+
    "\1\241\3\0\1\241\2\0\1\241\63\0\6\241\1\0"+
    "\1\241\14\0\1\243\1\361\1\362\2\243\2\0\4\243"+
    "\1\0\1\243\4\0\1\243\3\0\1\243\1\0\1\243"+
    "\6\0\2\243\33\0\10\243\15\0\1\363\1\364\1\0"+
    "\1\244\2\0\1\244\104\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\1\365\1\11\1\0\14\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\7\11"+
    "\1\366\4\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\11\11\1\367\2\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\5\11"+
    "\1\370\6\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\4\11\1\371\7\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\14\11"+
    "\1\0\1\11\1\372\6\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\14\11\1\0\1\11\1\373\6\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\1\11"+
    "\1\374\12\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\1\11\1\375\12\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\11\11"+
    "\1\376\2\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\13\11\1\377\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\1\11\1\u0100"+
    "\12\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\1\11\1\u0101\12\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\1\11\1\u0102"+
    "\12\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\14\11\1\0\7\11\1\u0103\5\0\1\11"+
    "\14\0\10\11\2\0\1\11\6\0\2\11\1\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\0\3\11\1\u0104\10\11"+
    "\1\0\10\11\5\0\1\11\14\0\10\11\2\0\1\11"+
    "\6\0\2\11\1\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\u0105\1\0\14\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\u0106\1\0\14\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\1\11\1\u0107\1\0"+
    "\7\11\1\u0108\4\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\14\11\1\0\1\11\1\u0109"+
    "\6\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\1\11\1\u010a\12\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\1\11\1\u010b\12\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\1\u010c\5\11\1\u010d\5\11\1\0\10\11\5\0\1\11"+
    "\14\0\10\11\2\0\1\11\6\0\2\11\1\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\0\1\u010e\13\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\6\11\1\u010f\5\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\4\11\1\u0110\7\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\4\11\1\u0111\7\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\1\11\1\u0112\12\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\5\11\1\u0113\6\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\u0114\1\0\14\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\1\11"+
    "\1\u0115\12\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\10\11\1\u0116\3\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\1\11"+
    "\1\u0117\12\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\1\11\1\u0118\12\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\7\11"+
    "\1\u0119\4\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\10\11\1\u011a\3\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\5\11"+
    "\1\u011b\6\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\1\u011c\1\11\1\0\14\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\1\11\1\u011d"+
    "\12\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\1\u011e\1\11\1\0\14\11\1\0\10\11\5\0\1\11"+
    "\14\0\10\11\2\0\1\11\6\0\2\11\1\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\u011f\1\0\14\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\4\11\1\u0120\7\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\1\11\1\u0121\12\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\1\u0122\1\11"+
    "\1\0\14\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\1\u0123\1\11\1\0\14\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\2\11\1\u0124"+
    "\11\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\7\11\1\u0125\4\11\1\0\1\11\1\u0126"+
    "\6\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\14\11\1\0\6\11\1\u0127\1\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\4\11\1\u0128\7\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\1\u0129\5\11\1\u012a\5\11\1\0\10\11\5\0\1\11"+
    "\14\0\10\11\2\0\1\11\6\0\2\11\1\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\0\4\11\1\u012b\7\11"+
    "\1\0\10\11\5\0\1\11\14\0\10\11\2\0\1\11"+
    "\6\0\2\11\1\0\13\11\1\0\1\11\4\0\1\u012c"+
    "\1\11\1\0\14\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\105\0\1\u012d\41\0\1\346\66\0"+
    "\4\235\1\234\1\357\111\235\11\0\1\243\1\361\1\0"+
    "\2\243\2\0\4\243\1\0\1\243\4\0\1\243\3\0"+
    "\1\243\1\0\1\243\6\0\2\243\33\0\10\243\15\0"+
    "\1\363\2\0\1\244\2\0\1\244\104\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\2\11\1\u012e"+
    "\11\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\1\u012f\13\11\1\0\10\11\5\0\1\11"+
    "\14\0\10\11\2\0\1\11\6\0\2\11\1\0\13\11"+
    "\1\0\1\11\4\0\1\u0130\1\11\1\0\14\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\7\11\1\u0131\4\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\1\11\1\u0132\12\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\1\u0133\1\11"+
    "\1\0\14\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\1\11\1\u0134\12\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\1\u0135"+
    "\13\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\10\11\1\u0136\3\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\1\u0137\13\11"+
    "\1\0\10\11\5\0\1\11\14\0\10\11\2\0\1\11"+
    "\6\0\2\11\1\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\0\10\11\1\u0138\3\11\1\0\10\11\5\0\1\11"+
    "\14\0\10\11\2\0\1\11\6\0\2\11\1\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\0\1\u0139\13\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\3\11\1\u013a\10\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\14\11\1\0\3\11\1\u013b"+
    "\4\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\1\11\1\u013c"+
    "\1\0\14\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\u013d\1\0\14\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\7\11\1\u013e"+
    "\4\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\10\11\1\u013f\3\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\1\u0140\1\11\1\0\14\11"+
    "\1\0\10\11\5\0\1\11\14\0\10\11\2\0\1\11"+
    "\6\0\2\11\1\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\0\10\11\1\u0141\3\11\1\0\10\11\5\0\1\11"+
    "\14\0\10\11\2\0\1\11\6\0\2\11\1\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\0\3\11\1\u0142\10\11"+
    "\1\0\10\11\5\0\1\11\14\0\10\11\2\0\1\11"+
    "\6\0\2\11\1\0\13\11\1\0\1\11\4\0\1\u0143"+
    "\1\11\1\0\14\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\1\u0144\13\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\4\11"+
    "\1\u0145\7\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\1\u0146\13\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\14\11\1\0"+
    "\4\11\1\u0147\3\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\1\u0148\1\11\1\0\14\11\1\0\10\11\5\0\1\11"+
    "\14\0\10\11\2\0\1\11\6\0\2\11\1\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\0\6\11\1\u0149\5\11"+
    "\1\0\10\11\5\0\1\11\14\0\10\11\2\0\1\11"+
    "\6\0\2\11\1\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\0\1\u014a\13\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\1\u014b\13\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\5\11\1\u014c\5\11\1\0\1\11\4\0\2\11"+
    "\1\0\14\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\1\u014d\13\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\14\11\1\0"+
    "\2\11\1\u014e\5\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\14\11\1\0\7\11\1\u014f\5\0\1\11"+
    "\14\0\10\11\2\0\1\11\6\0\2\11\1\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\0\1\11\1\u0150\12\11"+
    "\1\0\10\11\5\0\1\11\14\0\10\11\2\0\1\11"+
    "\6\0\2\11\1\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\0\12\11\1\u0151\1\11\1\0\10\11\5\0\1\11"+
    "\14\0\10\11\2\0\1\11\6\0\2\11\1\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\0\4\11\1\u0152\7\11"+
    "\1\0\10\11\5\0\1\11\14\0\10\11\2\0\1\11"+
    "\6\0\2\11\1\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\0\14\11\1\0\7\11\1\u0153\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\1\u0154\1\11\1\0\14\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\1\11"+
    "\1\u0155\12\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\1\11\1\u0156\12\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\1\u0157\1\11\1\0"+
    "\14\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\10\11\1\u0158\3\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\1\11\1\u0159"+
    "\12\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\1\11\1\u015a\12\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\1\u015b\13\11"+
    "\1\0\10\11\5\0\1\11\14\0\10\11\2\0\1\11"+
    "\106\0\1\u015c\16\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\1\u015d\1\11\1\0\14\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\4\11\1\u015e"+
    "\7\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\1\u015f\1\11\1\0\14\11\1\0\10\11\5\0\1\11"+
    "\14\0\10\11\2\0\1\11\6\0\2\11\1\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\0\12\11\1\u0160\1\11"+
    "\1\0\10\11\5\0\1\11\14\0\10\11\2\0\1\11"+
    "\6\0\2\11\1\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\0\1\u0161\13\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\6\11\1\u0162\5\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\14\11\1\0\6\11\1\u0163\1\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\6\11\1\u0164\5\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\1\11\1\u0165\12\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\6\11\1\u0166\5\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\7\11\1\u0167\4\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\10\11\1\u0168\3\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\1\u0169\13\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\6\11\1\u016a\5\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\6\11"+
    "\1\u016b\5\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\6\11\1\u016c\5\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\7\11"+
    "\1\u016d\4\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\7\11\1\u016e\4\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\10\11"+
    "\1\u016f\3\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\10\11\1\u0170\3\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\1\11"+
    "\1\u0171\12\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\4\11\1\u0172\7\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\1\11"+
    "\1\u0173\12\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\6\11\1\u0174\4\11\1\u0175\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\7\11\1\u0176\4\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\1\u0177\1\11\1\0\14\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\10\11"+
    "\1\u0178\3\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\4\11\1\u0179\7\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\14\11"+
    "\1\0\2\11\1\u017a\5\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\3\11\1\u017b\10\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\1\u017c"+
    "\13\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\7\11\1\u017d\4\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\3\11\1\u017e"+
    "\10\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\14\11\1\0\2\11\1\u017f\5\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\105\0\1\u0180\17\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\3\11\1\u0181\10\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\7\11\1\u0182\4\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\1\u0183\1\11"+
    "\1\0\14\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\12\11\1\u0184\1\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\1\11"+
    "\1\u0185\12\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\12\11\1\u0186\1\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\1\u0187\1\11\1\0"+
    "\14\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\6\11\1\u0188\5\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\11\11\1\u0189"+
    "\2\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\11\11\1\u018a\2\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\10\11\1\u018b"+
    "\3\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\10\11\1\u018c\3\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\5\11\1\u018d"+
    "\6\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\12\11\1\u018e\1\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\6\11\1\u018f"+
    "\5\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\3\11\1\u0190\10\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\10\11\1\u0191"+
    "\3\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\1\u0192\1\11\1\0\14\11\1\0\10\11\5\0\1\11"+
    "\14\0\10\11\2\0\1\11\6\0\2\11\1\0\13\11"+
    "\1\0\1\11\4\0\1\u0193\1\11\1\0\14\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\7\11\1\u0194\4\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\3\11\1\u0195\10\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\14\11\1\0\5\11\1\u0196\2\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\1\11\1\u0197\12\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\7\11\1\u0198\4\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\7\11\1\u0199\4\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\1\11\1\u019a\12\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\107\0\1\u019b\15\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\7\11\1\u019c"+
    "\4\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\10\11\1\u019d\3\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\14\11\1\0"+
    "\7\11\1\u019e\5\0\1\11\14\0\10\11\2\0\1\11"+
    "\6\0\2\11\1\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\0\1\u019f\13\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\4\11\1\u01a0\7\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\4\11\1\u01a1\7\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\3\11\1\u01a2\10\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\1\11\1\u01a3\12\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\5\11\1\u01a4\6\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\7\11\1\u01a5\4\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\1\u01a6\13\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\1\11"+
    "\1\u01a7\12\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\1\11\1\u01a8\12\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\1\u01a9\1\11\1\0"+
    "\14\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\4\11\1\u01aa\7\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\3\11\1\u01ab"+
    "\10\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\1\11\1\u01ac\12\11\1\0\10\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\6\0\2\11\1\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\0\1\11\1\u01ad"+
    "\12\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\6\0\2\11\1\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\0\14\11\1\0\5\11\1\u01ae\2\11\5\0"+
    "\1\11\14\0\10\11\2\0\1\11\110\0\1\u01af\14\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\5\11\1\u01b0\6\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\10\11\1\u01b1\3\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\2\11\1\0"+
    "\7\11\1\u01b2\4\11\1\0\10\11\5\0\1\11\14\0"+
    "\10\11\2\0\1\11\6\0\2\11\1\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\0\6\11\1\u01b3\5\11\1\0"+
    "\10\11\5\0\1\11\14\0\10\11\2\0\1\11\6\0"+
    "\2\11\1\0\13\11\1\0\1\11\4\0\1\11\1\u01b4"+
    "\1\0\14\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\6\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\1\11\1\u01b5\12\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\12\11"+
    "\1\u01b6\1\11\1\0\10\11\5\0\1\11\14\0\10\11"+
    "\2\0\1\11\111\0\1\u01b7\13\0\2\11\1\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\0\6\11\1\u01b8\5\11"+
    "\1\0\10\11\5\0\1\11\14\0\10\11\2\0\1\11"+
    "\6\0\2\11\1\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\0\6\11\1\u01b9\5\11\1\0\10\11\5\0\1\11"+
    "\14\0\10\11\2\0\1\11\6\0\2\11\1\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\0\5\11\1\u01ba\6\11"+
    "\1\0\10\11\5\0\1\11\14\0\10\11\2\0\1\11"+
    "\105\0\1\u01bb\17\0\2\11\1\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\0\1\11\1\u01bc\12\11\1\0\10\11"+
    "\5\0\1\11\14\0\10\11\2\0\1\11\6\0\2\11"+
    "\1\0\13\11\1\0\1\11\4\0\2\11\1\0\1\u01bd"+
    "\13\11\1\0\10\11\5\0\1\11\14\0\10\11\2\0"+
    "\1\11\107\0\1\u01be\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24964];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\12\1\2\11\25\1\1\11"+
    "\3\1\1\11\3\1\7\11\1\1\1\11\3\1\1\11"+
    "\2\1\1\0\2\11\2\0\2\11\1\1\1\0\1\11"+
    "\2\0\2\1\3\11\6\1\2\11\40\1\1\0\1\11"+
    "\7\1\4\11\1\0\2\11\1\1\11\11\12\1\1\11"+
    "\2\0\1\11\2\1\1\0\4\1\1\11\56\1\3\11"+
    "\12\1\1\0\1\11\1\0\10\11\2\0\1\1\1\0"+
    "\1\11\1\0\1\11\70\1\1\0\56\1\1\0\43\1"+
    "\1\0\32\1\1\0\23\1\1\0\7\1\1\0\3\1"+
    "\1\0\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private StringBuffer stringLiteral = new StringBuffer();
  private StringBuffer stringValue = new StringBuffer();

  private KotlinToken token(EKotlinTokenType type) {
    return new KotlinToken(type, type.getText(), yyline, yycolumn, null, 0);
  }
  private KotlinToken token(EKotlinTokenType type, String text) {
    return new KotlinToken(type, text, yyline, yycolumn, null, 0);
  }
  private KotlinToken token(EKotlinTokenType type, String text, int channel) {
    return new KotlinToken(type, text, yyline, yycolumn, null, channel);
  }
  private KotlinToken token(EKotlinTokenType type, String text, Object value) {
    return new KotlinToken(type, text, yyline, yycolumn, value, 0);
  }
  private KotlinToken token(EKotlinTokenType type, String text, Object value, int channel) {
    return new KotlinToken(type, text, yyline, yycolumn, value, channel);
  }

  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      char ch = yycharat(i);

      if ( ch == '_' ) {
        continue;
      }

      digit  = Character.digit( yycharat(i), radix );
      result *= radix;
      result += digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public KotlinLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2898) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public KotlinToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character <" + yytext() + ">");
            } 
            // fall through
          case 156: break;
          case 2: 
            { /* ignore */
            } 
            // fall through
          case 157: break;
          case 3: 
            { return token(SLASH);
            } 
            // fall through
          case 158: break;
          case 4: 
            { return token(STAR);
            } 
            // fall through
          case 159: break;
          case 5: 
            { return token(IDENTIFIER, yytext());
            } 
            // fall through
          case 160: break;
          case 6: 
            { return token(INTEGER_LITERAL, yytext(), (int) parseLong(2, yylength(), 10));
            } 
            // fall through
          case 161: break;
          case 7: 
            { return token(UNDERSCORE);
            } 
            // fall through
          case 162: break;
          case 8: 
            { return token(DOT);
            } 
            // fall through
          case 163: break;
          case 9: 
            { return token(PLUS);
            } 
            // fall through
          case 164: break;
          case 10: 
            { yybegin(STRINGLITERAL);
                                   stringLiteral.setLength(0);
                                   stringValue.setLength(0);
            } 
            // fall through
          case 165: break;
          case 11: 
            { yybegin(CHARLITERAL);
            } 
            // fall through
          case 166: break;
          case 12: 
            { return token(QUESTION);
            } 
            // fall through
          case 167: break;
          case 13: 
            { return token(NOT);
            } 
            // fall through
          case 168: break;
          case 14: 
            { return token(MINUS);
            } 
            // fall through
          case 169: break;
          case 15: 
            { return token(GT);
            } 
            // fall through
          case 170: break;
          case 16: 
            { return token(AT);
            } 
            // fall through
          case 171: break;
          case 17: 
            { return token(COLON);
            } 
            // fall through
          case 172: break;
          case 18: 
            { return token(DOLLAR);
            } 
            // fall through
          case 173: break;
          case 19: 
            { return token(EQ);
            } 
            // fall through
          case 174: break;
          case 20: 
            { return token(LBRACKET);
            } 
            // fall through
          case 175: break;
          case 21: 
            { return token(LT);
            } 
            // fall through
          case 176: break;
          case 22: 
            { return token(PERCENT);
            } 
            // fall through
          case 177: break;
          case 23: 
            { return token(RBRACKET);
            } 
            // fall through
          case 178: break;
          case 24: 
            { return token(SEMICOLON);
            } 
            // fall through
          case 179: break;
          case 25: 
            { return token(COMMA);
            } 
            // fall through
          case 180: break;
          case 26: 
            { return token(LBRACE);
            } 
            // fall through
          case 181: break;
          case 27: 
            { return token(LPAREN);
            } 
            // fall through
          case 182: break;
          case 28: 
            { return token(RBRACE);
            } 
            // fall through
          case 183: break;
          case 29: 
            { return token(RPAREN);
            } 
            // fall through
          case 184: break;
          case 30: 
            { stringLiteral.append( yytext() );
                                   stringValue.append( yytext() );
            } 
            // fall through
          case 185: break;
          case 31: 
            { yybegin(YYINITIAL);
                                   stringLiteral.append( '"' );
                                   return token(STRING_LITERAL, stringLiteral.toString(), stringValue.toString());
            } 
            // fall through
          case 186: break;
          case 32: 
            { stringLiteral.append( yytext() );
                                   stringValue.append('\\');
            } 
            // fall through
          case 187: break;
          case 33: 
            { throw new RuntimeException("Unterminated character literal at end of line");
            } 
            // fall through
          case 188: break;
          case 34: 
            { /* TODO: second channel? */
            } 
            // fall through
          case 189: break;
          case 35: 
            { return token(SLASH_EQ);
            } 
            // fall through
          case 190: break;
          case 36: 
            { return token(STAR_EQ);
            } 
            // fall through
          case 191: break;
          case 37: 
            { return token(INTEGER_LITERAL, yytext(), parseLong(2, yylength()-1, 10));
            } 
            // fall through
          case 192: break;
          case 38: 
            { return token(FLOATING_POINT_LITERAL, yytext(), Float.valueOf(yytext().substring(0,yylength()-1)));
            } 
            // fall through
          case 193: break;
          case 39: 
            { return token(FLOATING_POINT_LITERAL, yytext(), Double.valueOf(yytext()));
            } 
            // fall through
          case 194: break;
          case 40: 
            { return token(FLOATING_POINT_LITERAL, yytext(), Double.valueOf(yytext().substring(0,yylength()-1)));
            } 
            // fall through
          case 195: break;
          case 41: 
            { return token(BY);
            } 
            // fall through
          case 196: break;
          case 42: 
            { return token(DOT_DOT);
            } 
            // fall through
          case 197: break;
          case 43: 
            { return token(PLUS_PLUS);
            } 
            // fall through
          case 198: break;
          case 44: 
            { return token(PLUS_EQ);
            } 
            // fall through
          case 199: break;
          case 45: 
            { return token(AS);
            } 
            // fall through
          case 200: break;
          case 46: 
            { return token(QUESTION_DOT);
            } 
            // fall through
          case 201: break;
          case 47: 
            { return token(QUESTION_COLON);
            } 
            // fall through
          case 202: break;
          case 48: 
            { return token(IS);
            } 
            // fall through
          case 203: break;
          case 49: 
            { return token(IN);
            } 
            // fall through
          case 204: break;
          case 50: 
            { return token(IT);
            } 
            // fall through
          case 205: break;
          case 51: 
            { return token(IF);
            } 
            // fall through
          case 206: break;
          case 52: 
            { return token(DO);
            } 
            // fall through
          case 207: break;
          case 53: 
            { return token(NOT_NOT);
            } 
            // fall through
          case 208: break;
          case 54: 
            { return token(NOT_EQ);
            } 
            // fall through
          case 209: break;
          case 55: 
            { return token(AND);
            } 
            // fall through
          case 210: break;
          case 56: 
            { return token(MINUS_MINUS);
            } 
            // fall through
          case 211: break;
          case 57: 
            { return token(ARROW);
            } 
            // fall through
          case 212: break;
          case 58: 
            { return token(MINUS_EQ);
            } 
            // fall through
          case 213: break;
          case 59: 
            { return token(GT_EQ);
            } 
            // fall through
          case 214: break;
          case 60: 
            { return token(COLON_COLON);
            } 
            // fall through
          case 215: break;
          case 61: 
            { return token(EQ_EQ);
            } 
            // fall through
          case 216: break;
          case 62: 
            { return token(LT_EQ);
            } 
            // fall through
          case 217: break;
          case 63: 
            { return token(OR);
            } 
            // fall through
          case 218: break;
          case 64: 
            { return token(PERCENT_EQ);
            } 
            // fall through
          case 219: break;
          case 65: 
            { stringLiteral.append( yytext() );
                                   stringValue.append('\"');
            } 
            // fall through
          case 220: break;
          case 66: 
            { stringLiteral.append( yytext() );
                                   stringValue.append('\r');
            } 
            // fall through
          case 221: break;
          case 67: 
            { stringLiteral.append( yytext() );
                                   stringValue.append('\n');
            } 
            // fall through
          case 222: break;
          case 68: 
            { stringLiteral.append( yytext() );
                                   stringValue.append('\t');
            } 
            // fall through
          case 223: break;
          case 69: 
            { yybegin(YYINITIAL);
                                   return token(CHARACTER_LITERAL, "'" + yytext(), yytext().charAt(0));
            } 
            // fall through
          case 224: break;
          case 70: 
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            } 
            // fall through
          case 225: break;
          case 71: 
            { return token(INTEGER_LITERAL, yytext(), (int) parseLong(2, yylength(), 16));
            } 
            // fall through
          case 226: break;
          case 72: 
            { return token(INTEGER_LITERAL, yytext(), (int) parseLong(0, yylength(), 2));
            } 
            // fall through
          case 227: break;
          case 73: 
            { return token(AS_Q);
            } 
            // fall through
          case 228: break;
          case 74: 
            { return token(SET);
            } 
            // fall through
          case 229: break;
          case 75: 
            { return token(OUT);
            } 
            // fall through
          case 230: break;
          case 76: 
            { return token(TRY);
            } 
            // fall through
          case 231: break;
          case 77: 
            { return token(FOR);
            } 
            // fall through
          case 232: break;
          case 78: 
            { return token(FUN);
            } 
            // fall through
          case 233: break;
          case 79: 
            { return token(NOT_IS);
            } 
            // fall through
          case 234: break;
          case 80: 
            { return token(NOT_IN);
            } 
            // fall through
          case 235: break;
          case 81: 
            { return token(NOT_EQ_EQ);
            } 
            // fall through
          case 236: break;
          case 82: 
            { return token(GET);
            } 
            // fall through
          case 237: break;
          case 83: 
            { return token(VAR);
            } 
            // fall through
          case 238: break;
          case 84: 
            { return token(VAL);
            } 
            // fall through
          case 239: break;
          case 85: 
            { return token(EQ_EQ_EQ);
            } 
            // fall through
          case 240: break;
          case 86: 
            { yybegin(YYINITIAL);
                                   int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
			                       return token(CHARACTER_LITERAL, "'" + yytext(), (char)val);
            } 
            // fall through
          case 241: break;
          case 87: 
            { yybegin(YYINITIAL);
                                   return token(CHARACTER_LITERAL, "'\\b'", '\b');
            } 
            // fall through
          case 242: break;
          case 88: 
            { yybegin(YYINITIAL);
                                   return token(CHARACTER_LITERAL, "'\\\"'", '\"');
            } 
            // fall through
          case 243: break;
          case 89: 
            { yybegin(YYINITIAL);
                                   return token(CHARACTER_LITERAL, "'\\''", '\'');
            } 
            // fall through
          case 244: break;
          case 90: 
            { yybegin(YYINITIAL);
                                   return token(CHARACTER_LITERAL, "'\\\\'", '\\');
            } 
            // fall through
          case 245: break;
          case 91: 
            { yybegin(YYINITIAL);
                                   return token(CHARACTER_LITERAL, "'\\r'", '\r');
            } 
            // fall through
          case 246: break;
          case 92: 
            { yybegin(YYINITIAL);
                                   return token(CHARACTER_LITERAL, "'\\n'", '\n');
            } 
            // fall through
          case 247: break;
          case 93: 
            { yybegin(YYINITIAL);
                                   return token(CHARACTER_LITERAL, "'\\t'", '\t');
            } 
            // fall through
          case 248: break;
          case 94: 
            { return token(INTEGER_LITERAL, yytext(), parseLong(2, yylength()-1, 16));
            } 
            // fall through
          case 249: break;
          case 95: 
            { return token(INTEGER_LITERAL, yytext(), parseLong(0, yylength()-1, 2));
            } 
            // fall through
          case 250: break;
          case 96: 
            { return token(ELSE);
            } 
            // fall through
          case 251: break;
          case 97: 
            { return token(ENUM);
            } 
            // fall through
          case 252: break;
          case 98: 
            { return token(OPEN);
            } 
            // fall through
          case 253: break;
          case 99: 
            { return token(NULL);
            } 
            // fall through
          case 254: break;
          case 100: 
            { return token(TRUE);
            } 
            // fall through
          case 255: break;
          case 101: 
            { return token(THIS);
            } 
            // fall through
          case 256: break;
          case 102: 
            { return token(INIT);
            } 
            // fall through
          case 257: break;
          case 103: 
            { return token(DATA);
            } 
            // fall through
          case 258: break;
          case 104: 
            { return token(FILE);
            } 
            // fall through
          case 259: break;
          case 105: 
            { return token(WHEN);
            } 
            // fall through
          case 260: break;
          case 106: 
            { return token(BREAK);
            } 
            // fall through
          case 261: break;
          case 107: 
            { return token(SUPER);
            } 
            // fall through
          case 262: break;
          case 108: 
            { return token(CATCH);
            } 
            // fall through
          case 263: break;
          case 109: 
            { return token(CLASS);
            } 
            // fall through
          case 264: break;
          case 110: 
            { return token(CONST);
            } 
            // fall through
          case 265: break;
          case 111: 
            { return token(THROW);
            } 
            // fall through
          case 266: break;
          case 112: 
            { return token(INNER);
            } 
            // fall through
          case 267: break;
          case 113: 
            { return token(INFIX);
            } 
            // fall through
          case 268: break;
          case 114: 
            { return token(FALSE);
            } 
            // fall through
          case 269: break;
          case 115: 
            { return token(FIELD);
            } 
            // fall through
          case 270: break;
          case 116: 
            { return token(FINAL);
            } 
            // fall through
          case 271: break;
          case 117: 
            { return token(PARAM);
            } 
            // fall through
          case 272: break;
          case 118: 
            { return token(WHERE);
            } 
            // fall through
          case 273: break;
          case 119: 
            { return token(WHILE);
            } 
            // fall through
          case 274: break;
          case 120: 
            { return token(ACTUAL);
            } 
            // fall through
          case 275: break;
          case 121: 
            { return token(SEALED);
            } 
            // fall through
          case 276: break;
          case 122: 
            { return token(RETURN);
            } 
            // fall through
          case 277: break;
          case 123: 
            { return token(EXPECT);
            } 
            // fall through
          case 278: break;
          case 124: 
            { return token(OBJECT);
            } 
            // fall through
          case 279: break;
          case 125: 
            { return token(INLINE);
            } 
            // fall through
          case 280: break;
          case 126: 
            { return token(IMPORT);
            } 
            // fall through
          case 281: break;
          case 127: 
            { return token(PUBLIC);
            } 
            // fall through
          case 282: break;
          case 128: 
            { return token(VARARG);
            } 
            // fall through
          case 283: break;
          case 129: 
            { return token(SUSPEND);
            } 
            // fall through
          case 284: break;
          case 130: 
            { return token(REIFIED);
            } 
            // fall through
          case 285: break;
          case 131: 
            { return token(TAILREC);
            } 
            // fall through
          case 286: break;
          case 132: 
            { return token(DYNAMIC);
            } 
            // fall through
          case 287: break;
          case 133: 
            { return token(FINALLY);
            } 
            // fall through
          case 288: break;
          case 134: 
            { return token(PACKAGE);
            } 
            // fall through
          case 289: break;
          case 135: 
            { return token(PRIVATE);
            } 
            // fall through
          case 290: break;
          case 136: 
            { return token(ABSTRACT);
            } 
            // fall through
          case 291: break;
          case 137: 
            { return token(SETPARAM);
            } 
            // fall through
          case 292: break;
          case 138: 
            { return token(RECEIVER);
            } 
            // fall through
          case 293: break;
          case 139: 
            { return token(EXTERNAL);
            } 
            // fall through
          case 294: break;
          case 140: 
            { return token(CONTINUE);
            } 
            // fall through
          case 295: break;
          case 141: 
            { return token(LATEINIT);
            } 
            // fall through
          case 296: break;
          case 142: 
            { return token(OPERATOR);
            } 
            // fall through
          case 297: break;
          case 143: 
            { return token(OVERRIDE);
            } 
            // fall through
          case 298: break;
          case 144: 
            { return token(NOINLINE);
            } 
            // fall through
          case 299: break;
          case 145: 
            { return token(INTERNAL);
            } 
            // fall through
          case 300: break;
          case 146: 
            { return token(DELEGATE);
            } 
            // fall through
          case 301: break;
          case 147: 
            { return token(PROPERTY);
            } 
            // fall through
          case 302: break;
          case 148: 
            { return token(COMPANION);
            } 
            // fall through
          case 303: break;
          case 149: 
            { return token(TYPEALIAS);
            } 
            // fall through
          case 304: break;
          case 150: 
            { return token(INTERFACE);
            } 
            // fall through
          case 305: break;
          case 151: 
            { return token(PROTECTED);
            } 
            // fall through
          case 306: break;
          case 152: 
            { return token(ANNOTATION);
            } 
            // fall through
          case 307: break;
          case 153: 
            { return token(CROSSINLINE);
            } 
            // fall through
          case 308: break;
          case 154: 
            { return token(CONSTRUCTOR);
            } 
            // fall through
          case 309: break;
          case 155: 
            { return token(INTEGER_LITERAL, yytext(), Integer.MIN_VALUE);
            } 
            // fall through
          case 310: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
